// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User model
model User {
  id             String     @id @default(uuid())
  username       String     @unique
  email          String     @unique
  password       String
  firstname      String?
  lastname       String?
 
  businesses     Business[] @relation("BusinessOwner")
  comments       Comment[]
  ratings        Rating[]
  favorites      Favorite[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
   passwordResetTokens PasswordResetToken[]
}

// Update the Business model to reference Category
model Business {
  id                     String   @id @default(uuid())
  businessName           String
  ownerId                String
  categoryId             String
  businessEmail          String   @unique
  businessAddress        String
  businessPhone          String   @unique
  websiteUrl             String?
  latitude               Float?
  longitude              Float?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  owner                  User     @relation(fields: [ownerId], references: [id])
  category               Category @relation(fields: [categoryId], references: [id]) // Establish relationship
}

model Category {
  id         String     @id @default(uuid())
  name       String     @unique
  businesses Business[]
}

model SubCategory {
  id          String    @id @default(uuid())
  name        String    @unique
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  businesses  Business[]
}

model SocialMediaLink {
  id          String    @id @default(uuid())
  platform    String
  url         String
  businessId  String
  business    Business  @relation(fields: [businessId], references: [id])
}


model Service {
  id          String    @id @default(uuid())
  name        String
  description String?
  businessId  String
  business    Business  @relation(fields: [businessId], references: [id])
}



// Comment model
model Comment {
  id         String   @id @default(uuid())
  userId     String
  businessId String
  comment    String
  user       User     @relation(fields: [userId], references: [id])
  business   Business @relation(fields: [businessId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Rating model
model Rating {
  id         String   @id @default(uuid())
  userId     String
  businessId String
  rating     Int     
  user       User     @relation(fields: [userId], references: [id])
  business   Business @relation(fields: [businessId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Favorite model
model Favorite {
  id         String   @id @default(uuid())
  userId     String
  businessId String
  user       User     @relation(fields: [userId], references: [id])
  business   Business @relation(fields: [businessId], references: [id])
  createdAt  DateTime @default(now())
}

// Photo model
model Photo {
  id         String   @id @default(uuid())
  businessId String
  url        String
  business   Business @relation(fields: [businessId], references: [id])
  createdAt  DateTime @default(now())
}
model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}